## Sums from 0 to n inclusive
function @sumToN:num (n:num)
    var total:num, i:num;
    {
    loop {
        when (i == n) do return total;
        total += ++i;
    }
}
print @sumToN(5); # 15
print @sumToN(0); # 0
end



## GCD example
function @gcd:num (a:num, b:num)
{
    ## Everything divides 0
    when (a == 0) do return b;
    when (b == 0) do return a;
    when (a == b) do return a; ## base case

    if (a > b) do
        return @gcd(a-b, b);
    else
        return @gcd(a, b-a);
}
print @gcd(32, 24);
print @gcd(21, 13);
end




## floor of x / 2
function @floorBy2:num (x:num) {
    when (x % 2 == 0) do return x / 2;
    return (x - 1) / 2;
}
## check if number is even
function @isEven:bool (y:num) {
    return y % 2 == 1;
}
## Iterative Function to calculate (x^y)%p
function @power:num (x:num, y:num, p:num)
    var res:num;
    {
    res := 1;   ## Initialize result
    x %= p; ## Update x if it is more than or equal to p
    when (x == 0) do return 0; ## In case x is divisible by p;

    while (y > 0) do
    {
        ## If y is odd, multiply x with result
        when (@isEven(y)) do
            res := (res*x) % p;

        ## y must be even now
        y := @floorBy2(y);
        x := (x*x) % p;
    }
    return res;
}
var x:num, y:num, p:num;
x := 30;
y := 20;
p := 14;
print @power(x, y, p); # 4.0
end


## all loop examples
var max:num, i:num;
max := 3;
unless (i == max) do {
    print ++i;
}
do {
    print ++i;
} until (i == 2 * max)
while (i != 3 * max) do {
    print ++i;
}
do {
    print ++i;
} while (i != 4 * max)
loop {
    print ++i;
    when (i == 5 * max) do break;
}
repeat 3 : {
    print ++i;
}
end




## check if a number is prime
function @isPrime:bool (prime:num) var i:num; {
    when (prime <= 1) do return false;
    i := prime - 1;
    while (i > 1) do {
        when (prime % i-- == 0) do return false;
    }
    return true;
}
print @isPrime(1); ## false
print @isPrime(2); ## true
print @isPrime(5); ## true
print @isPrime(12); ## false
end




## check if a number is prime
function @getFirstPrimeFromN:num (n:num) var i:num, number:num, isPrime:bool; {
    number := n;
    loop {
        i := number - 1;
        isPrime := true;
        until (i == 1) do {
            when (number % i-- == 0) do {
                isPrime := false; ## not a prime
                break;
            }
        }
        if (isPrime) do
            return number;
        else
            number++;
    }
}
print @getFirstPrimeFromN(14); ## 17.0
end
